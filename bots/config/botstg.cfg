[global]

# DATABASE
# driver://username:password@host:port/database
#I use postgreSQL with utf8 encoding (CREATE DATABASE botsdb WITH ENCODING 'UTF8';)
#~ sqlalchemy.dburi="postgres://bots:botsbots@192.168.0.7/botsdb"
#I use a MySQL db with utf-8 encoding. (CREATE DATABASE botsdb DEFAULT CHARSET utf8;)
#~ sqlalchemy.dburi="mysql://bots:botsbots@192.168.0.7:3306/botsdb?use_unicode=0&charset=utf8"
#SQLite does unicode thing OK.
sqlalchemy.dburi="sqlite:///%(top_level_dir)s/botssys/sqlitedb/botsdb"


# set to 1 to make SQLAlchemy echo SQL commands on the console
#sqlalchemy.echo = False

# SERVER
# Some server parameters that you may want to tweak
server.socket_port=8080
# Sets the number of threads the server uses
# server.thread_pool = 1

# Enable the debug output at the end on pages.
log_debug_info_filter.on = False

server.environment="production"
#~ server.environment="development"

autoreload.package="bots"

session_filter.on = False

# Set to True if you'd like to abort execution if a controller gets an
# unexpected parameter. False by default
tg.strict_parameters = True

# The commented out values below are the defaults

# VIEW

# which view (template engine) to use if one is not specified in the
# template name
tg.defaultview = "kid"

# The following kid settings determine the settings used by the kid serializer.

# One of (html|html-strict|xhtml|xhtml-strict|xml|json)
kid.outputformat="xhtml-strict"

# kid.encoding="utf-8"

# The sitetemplate is used for overall styling of a site that
# includes multiple TurboGears applications
tg.sitetemplate=""

# Allow every exposed function to be called as json,
# tg.allow_json = False

# List of Widgets to include on every page.
# for exemple ['turbogears.mochikit']
# tg.include_widgets = []

# Set to True if the scheduler should be started
# tg.scheduler = False

# VISIT TRACKING
# Each visit to your application will be assigned a unique visit ID tracked via
# a cookie sent to the visitor's browser.
# --------------

# Enable Visit tracking
visit.on=True

# Number of minutes a visit may be idle before it expires.
visit.timeout=240

# The name of the cookie to transmit to the visitor's browser.
# visit.cookie.name="tg-visit"

# Domain name to specify when setting the cookie (must begin with . according to
# RFC 2109). The default (None) should work for most cases and will default to
# the machine to which the request was made. NOTE: localhost is NEVER a valid
# value and will NOT WORK.
# visit.cookie.domain=None

# Specific path for the cookie
# visit.cookie.path="/"

# The name of the VisitManager plugin to use for visitor tracking.
visit.manager="sqlalchemy"

# Database class to use for visit tracking
visit.saprovider.model = "bots.model.Visit"
identity.saprovider.model.visit = "bots.model.VisitIdentity"

# IDENTITY
# General configuration of the TurboGears Identity management module
# --------

# Switch to turn on or off the Identity management module
identity.on=True

# [REQUIRED] URL to which CherryPy will internally redirect when an access
# control check fails. If Identity management is turned on, a value for this
# option must be specified.
identity.failure_url="/login"

# If force_external_redirect is set to True, then the identity
# framework will use an external redirection.
# This is mainly used to make sure that if you use
# an https:// url in the failure_url, this will be respected.
#~ identity.force_external_redirect=False

identity.provider='sqlalchemy'

# The names of the fields on the login form containing the visitor's user ID
# and password. In addition, the submit button is specified simply so its
# existence may be stripped out prior to passing the form data to the target
# controller.
# identity.form.user_name="user_name"
# identity.form.password="password"
# identity.form.submit="login"

# What sources should the identity provider consider when determining the
# identity associated with a request? Comma separated list of identity sources.
# Valid sources: form, visit, http_auth
#identity.source="form,http_auth,visit"
#identity.source="form,visit"


# SqlAlchemyIdentityProvider
# Configuration options for the default IdentityProvider
# -------------------------

# The classes you wish to use for your Identity model. Remember to not use reserved
# SQL keywords for class names (at least unless you specify a different table
# name using sqlmeta).
identity.saprovider.model.user="bots.model.User"
identity.saprovider.model.group="bots.model.Group"
identity.saprovider.model.permission="bots.model.Permission"

# The password encryption algorithm used when comparing passwords against what's
# stored in the database. Valid values are 'md5' or 'sha1'. If you do not
# specify an encryption algorithm, passwords are expected to be clear text.
# The SqlAlchemyProvider *will* encrypt passwords supplied as part of your login
# form.  If you set the password through the password property, like:
# my_user.password = 'secret'
# the password will be encrypted in the database, provided identity is up and 
# running, or you have loaded the configuration specifying what encryption to
# use (in situations where identity may not yet be running, like tests).

# identity.saprovider.encryption_algorithm=None
#identity.saprovider.encryption_algorithm='sha1'

# compress the data sends to the web browser
[/] 
gzip_filter.on = True
gzip_filter.mime_types = ["application/x-javascript", "text/javascript", "text/html", "text/css", "text/plain"]

[/static]
static_filter.on = True
static_filter.dir = "%(top_level_dir)s/static"

[/favicon.ico]
static_filter.on = True
static_filter.file = "%(top_level_dir)s/static/images/favicon.ico"


# LOGGING
# Logging configuration generally follows the style of the standard
# Python logging module configuration. Note that when specifying
# log format messages, you need to use *() for formatting variables.
[logging]
[[formatters]]
[[[defaultformat]]]
format='*(asctime)s *(name)s *(levelname)s *(message)s'

[[handlers]]
[[[screen]]]
class='StreamHandler'
level='INFO'
args='(sys.stdout,)'
formatter='defaultformat'

[[[logfile]]]
class='TimedRotatingFileHandler'
level='INFO'
#in args: 'D':per day, then number of <days>, number of logs to keep
args="('botssys/logging/tgwebserver.log','D',1,10)"
formatter='defaultformat'

[[loggers]]
[[[bots]]]
level='INFO'
qualname='bots'
propagate=1

[[[access]]]
level='INFO'
qualname='turbogears.access'
propagate=1

[[[allinfo]]]
level='INFO'
handlers=['logfile','screen']
